openapi: 3.1.0
info:
  version: 1.0.0
  title: API для управління контактами та користувачами
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Цей API надає розширений функціонал для управління обліковими записами користувачів та їхніми особистими контактами.
    Він включає функції реєстрації користувачів, автентифікації, скидання паролів та управління сесіями.
    Користувачі можуть створювати, оновлювати, видаляти та отримувати контакти, фільтрувати їх за типом або статусом улюбленого,
    а також завантажувати фотографії профілю, використовуючи безпечне хмарне зберігання.

servers:
  - url: https://nodejs-hw-mongodb-i55t.onrender.com

security:
  - bearerAuth: []

tags:
  - name: Contacts
    description: Операції, пов'язані з контактами
  - name: Auth
    description: Операції, пов'язані з реєстрацією та авторизацією користувачів

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Реєстрація нового користувача
      operationId: registerUser
      description: Створення нового користувача на платформі.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        201:
          description: Користувача успішно зареєстровано.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully registered a user!
                  data:
                    $ref: "#/components/schemas/User"
        400:
          description: Некоректні дані.

  /auth/login:
    post:
      tags:
        - Auth
      summary: Авторизація користувача
      operationId: loginUser
      description: Отримання Bearer токена для доступу до захищених ресурсів.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Успішний вхід, повертається токен авторизації.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        401:
          description: Некоректні дані для входу.

  /contacts/{contactId}:
    get:
      $ref: "../swagger/paths/contacts/id/get.yaml"
    patch:
      $ref: "../swagger/paths/contacts/id/patch.yaml"
    delete:
      $ref: "../swagger/paths/contacts/id/delete.yaml"

  /contacts:
    get:
      $ref: "../swagger/paths/contacts/get.yaml"
    post:
      $ref: "../swagger/paths/contacts/post.yaml"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    Contact:
      $ref: "../swagger/components/contact.yaml"

    User:
      type: object
      properties:
        _id:
          type: string
          example: 67082b1bbaaded498ecab554
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          example: "jane@example.com"
        password:
          type: string
          example: "password123"
      required:
        - name
        - email
        - password
